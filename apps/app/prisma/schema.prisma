// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  relationMode         = "prisma"
}

generator client {
  provider        = "prisma-client-js"
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "./dbml"
  outputName          = "schema.dbml"
  projectName         = "Couple"
  projectDatabaseType = "MySQL-PlanetScale"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  owns          Couple[]        @relation(name: "creator")
  joins         Couple[]        @relation(name: "joiner")
  sendFReq      CoupleRequest[] @relation(name: "sendFReq")
  receiveFReq   CoupleRequest[] @relation(name: "receiveFReq")

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Couple {
  id             Int            @id @default(autoincrement())
  created        DateTime       @default(now())
  creator        User           @relation(fields: [creatorId], references: [id], name: "creator", onDelete: Cascade)
  creatorId      String
  joiner         User?          @relation(fields: [joinerId], references: [id], name: "joiner", onDelete: Cascade)
  joinerId       String?
  coupleNotes    CoupleNotes[]
  coupleGallery  CoupleGallery?
  coupleLinkSafe CoupleLinks[]
  active         Boolean        @default(false)

  @@index([creatorId])
  @@index([joinerId])
}

model CoupleNotes {
  id          Int      @id @default(autoincrement())
  couple      Couple   @relation(fields: [coupleId], references: [id], onDelete: Cascade)
  coupleId    Int
  createdTime DateTime @default(now())
  lastUpdate  DateTime @default(now())
  content     String?  @db.Text

  @@index([coupleId])
}

model CoupleRequest {
  id         Int      @id @default(autoincrement())
  created    DateTime @default(now())
  sender     User     @relation(fields: [senderId], references: [id], onDelete: Cascade, name: "sendFReq")
  senderId   String
  receiver   User     @relation(fields: [receiverId], references: [id], onDelete: Cascade, name: "receiveFReq")
  receiverId String

  @@index([senderId])
  @@index([receiverId])
}

model CoupleGallery {
  id          Int          @id @default(autoincrement())
  couple      Couple       @relation(fields: [coupleId], references: [id])
  coupleId    Int          @unique
  imageAlbums ImageAlbum[]
  safeAlbum   SafeAlbum?
}

model CoupleLinks {
  id         Int      @id @default(autoincrement())
  Couple     Couple?  @relation(fields: [coupleId], references: [id], onDelete: Cascade)
  coupleId   Int?
  link       String   @db.Text
  uploadDate DateTime @default(now())

  @@index([coupleId])
}

model ImageAlbum {
  id              Int            @id @default(autoincrement())
  CoupleGallery   CoupleGallery? @relation(fields: [coupleGalleryId], references: [id])
  coupleGalleryId Int?
  image           Image[]
  lastUpdate      DateTime       @default(now())

  @@index([coupleGalleryId])
}

model Image {
  id           Int         @id @default(autoincrement())
  uploadDate   DateTime    @default(now())
  ImageAlbum   ImageAlbum? @relation(fields: [imageAlbumId], references: [id], onDelete: Cascade)
  imageAlbumId Int?
  SafeAlbum    SafeAlbum?  @relation(fields: [safeAlbumId], references: [id], onDelete: Cascade)
  safeAlbumId  Int?

  @@index([imageAlbumId])
  @@index([safeAlbumId])
}

model SafeAlbum {
  id              Int           @id @default(autoincrement())
  lastUpdate      DateTime      @default(now())
  image           Image[]
  coupleGallery   CoupleGallery @relation(fields: [coupleGalleryId], references: [id])
  coupleGalleryId Int           @unique
}
