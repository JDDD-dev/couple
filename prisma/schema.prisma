// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  output          = "./generated/client"
  previewFeatures = ["referentialIntegrity"]
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "./dbml"
  outputName          = "schema.dbml"
  projectName         = "Couple"
  projectDatabaseType = "MySql-PlanetScale"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  owns          Couple[]        @relation(name: "creator")
  joins         Couple[]        @relation(name: "joiner")
  sendFReq      CoupleRequest[] @relation(name: "sendFReq")
  receiveFReq   CoupleRequest[] @relation(name: "receiveFReq")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Couple {
  id        Int             @id @default(autoincrement())
  created   DateTime        @default(now())
  creator   User            @relation(fields: [creatorId], references: [id], name: "creator", onDelete: Cascade)
  creatorId String
  joiner    User?           @relation(fields: [joinerId], references: [id], name: "joiner", onDelete: Cascade)
  joinerId  String?
  content   CoupleContent[]
  active    Boolean         @default(false)
}

model CoupleContent {
  id       Int      @id @default(autoincrement())
  couple   Couple   @relation(fields: [coupleId], references: [id], onDelete: Cascade)
  coupleId Int
  time     DateTime @default(now())
  content  String
}

model CoupleRequest {
  id         Int      @id @default(autoincrement())
  created    DateTime @default(now())
  sender     User     @relation(fields: [senderId], references: [id], onDelete: Cascade, name: "sendFReq")
  senderId   String
  receiver   User     @relation(fields: [receiverId], references: [id], onDelete: Cascade, name: "receiveFReq")
  receiverId String
}
